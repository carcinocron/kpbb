<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Crystal Programming Language</title>
    <description>A compiled language with Ruby like syntax and type inference</description>
    <link>https://crystal-lang.org</link>
    <atom:link href="https://crystal-lang.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Announcing new apt and rpm repositories</title>
        <description>&lt;p&gt;We’ve been working on improving the state of the art of the official deb and rpm repositories.&lt;/p&gt;

&lt;p&gt;The main outcome is that we will be able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;publish stable, unstable and nightly packages&lt;/li&gt;
  &lt;li&gt;allow users to pick which crystal version to install&lt;/li&gt;
  &lt;li&gt;allow tweaking dependencies when needed (ie: CentOS 6 vs others regarding libevent2-devel and libevent-devel)&lt;/li&gt;
  &lt;li&gt;introduce a single installation script that, for now, will work with deb/rpm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will allow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a more comfortable experience to end user&lt;/li&gt;
  &lt;li&gt;relying on apt and rpm repositories for getting not only the latest crystal release&lt;/li&gt;
  &lt;li&gt;testing nightly packages without requiring Docker or Snap&lt;/li&gt;
  &lt;li&gt;simplifying adoption in other CI systems in case our Docker image is not suitable enough&lt;/li&gt;
  &lt;li&gt;having statistics of version adoption&lt;/li&gt;
  &lt;li&gt;eventually splitting the current package in compiler, shards and maybe tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be hosting these packages at &lt;a href=&quot;https://bintray.com/crystal&quot;&gt;https://bintray.com/crystal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current apt and rpm packages in &lt;a href=&quot;https://dist.crystal-lang.org/&quot;&gt;https://dist.crystal-lang.org&lt;/a&gt; will be available and receive stable updates until November 2020 as a transition period.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/install.sh&quot;&gt;installation script&lt;/a&gt; allows installing the latest stable version by default:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; install.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x install.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install.sh
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, to run it directly
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer wget
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://crystal-lang.org/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Choose the channel, for example to pick nightly packages:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nightly
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, to run it directly
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nightly
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer wget
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://crystal-lang.org/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nightly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Install a specific version as &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch-iteration&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.35
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, to run it directly
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.35
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer wget
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://crystal-lang.org/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.35&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In general, the install script accepts optional arguments&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--crystal&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch-iteration&lt;/code&gt; values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--channel&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;stable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;nightly&lt;/code&gt; value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will identify the Linux distribution and use &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The installation script requires &lt;code class=&quot;highlighter-rouge&quot;&gt;gnupg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ca-certificates&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-transport-https&lt;/code&gt; packages that might be already available on your setup. It also needs to be run as root.&lt;/p&gt;

&lt;h2 id=&quot;what-if-i-already-have-crystal-installed-via-aptrpm&quot;&gt;What if I already have crystal installed via apt/rpm?&lt;/h2&gt;

&lt;p&gt;The installation script will overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/crystal.list&lt;/code&gt; and  &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/yum.repos.d/crystal.repo&lt;/code&gt; on every execution. These are the same files used in the former official apt and rpm repositories.&lt;/p&gt;

&lt;p&gt;If you already have the latest version of Crystal (0.35.1) and run the installation scripts you will see&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Debian/Ubuntu
&lt;span class=&quot;go&quot;&gt;... stripped ...
crystal is already the newest version (0.35.1-1).
0 upgraded, 0 newly installed, 0 to remove and 2 not upgraded.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; CentOS/Fedora
&lt;span class=&quot;go&quot;&gt;... stripped ...
Package crystal-0.35.1-1.x86_64 already installed and latest version
Nothing to do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This happens when there is no newer version in the new repository. If you switch to the nightly channel you will get 1.0.0-dev.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;apt -y remove crystal&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;rpm -e crystal&lt;/code&gt; to remove the current installed Crystal and then execute the installation script.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;The installation script will upgrade to a newer crystal, but will not downgrade.&lt;/p&gt;

&lt;p&gt;If you already have 0.35.1 and wish to downgrade to the latest 0.34 you will get the following output.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.34
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Debian/Ubuntu
&lt;span class=&quot;go&quot;&gt;... stripped ...
Selected version '0.34.0-1' (Bintray:all [amd64]) for 'crystal'
Suggested packages:
  libxml2-dev libgmp-dev libyaml-dev libreadline-dev
The following packages will be DOWNGRADED:
  crystal
0 upgraded, 0 newly installed, 1 downgraded, 0 to remove and 2 not upgraded.
E: Packages were downgraded and -y was used without --allow-downgrades.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; CentOS/Fedora
&lt;span class=&quot;go&quot;&gt;... stripped ...
Package matching crystal-0.34.0-1.x86_64 already installed. Checking for update.
Nothing to do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Instead of forcing a downgrade in the installation script we require you to explicitly uninstall crystal before a downgrade.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Debian/Ubuntu
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; remove crystal
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.34
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; CentOS/Fedora
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rpm &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; crystal
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.34&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When switching between channels you might need to clear the cached metadata.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum clean metadata&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What follows is a description of how these repositories are laid out for the sake of documentation.&lt;/p&gt;

&lt;h2 id=&quot;deb-repository&quot;&gt;deb repository&lt;/h2&gt;

&lt;p&gt;The deb repository declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;deb_distribution=all&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;deb_component&lt;/code&gt; is used for the channel.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;deb https://dl.bintray.com/crystal/deb all stable
deb https://dl.bintray.com/crystal/deb all unstable
deb https://dl.bintray.com/crystal/deb all nightly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Luckily the dependencies of all deb distributions are the same and there is no need, at least for now, to distinguish between them.&lt;/p&gt;

&lt;p&gt;Packages for amd64 and i386 are published.&lt;/p&gt;

&lt;p&gt;The repository metadata is signed with the Bintray shared GPG key&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt-key adv &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkp://keyserver.ubuntu.com:80 &lt;span class=&quot;nt&quot;&gt;--recv-keys&lt;/span&gt; 379CE192D401AB61&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The deb packages in stable and unstable channels are signed with our own GPG key.&lt;/p&gt;

&lt;p&gt;The deb packages in the nightly channel are not signed.&lt;/p&gt;

&lt;p&gt;When installing via &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; only the repository metadata signature is checked, so there is no need to add our own key in general.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://keybase.io/crystal/pgp_keys.asc&quot;&lt;/span&gt; | apt-key add -&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rpm-repository&quot;&gt;rpm repository&lt;/h2&gt;

&lt;p&gt;The rpm repository required a bit more fine tuning. The url of the repo is &lt;code class=&quot;highlighter-rouge&quot;&gt;https://dl.bintray.com/crystal/rpm/{DISTRO}/{ARCH}/{CHANNEL}&lt;/code&gt;. In terms of Bintray configuration we use &lt;code class=&quot;highlighter-rouge&quot;&gt;yum_metadata_depth=3&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;We will be using two &lt;code class=&quot;highlighter-rouge&quot;&gt;{DISTRO}&lt;/code&gt; values: &lt;code class=&quot;highlighter-rouge&quot;&gt;el6&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;. This is enough, for now, to support CentOS 6/7/8, Fedora. (Note: if CentOS 6/7 shipped with rpm &amp;gt;= 4.13 then a single package would have been enough with &lt;code class=&quot;highlighter-rouge&quot;&gt;libevent-devel &amp;gt;= 2.0 or libevent2-devel&lt;/code&gt; as a dependency).&lt;/p&gt;

&lt;p&gt;The only supported &lt;code class=&quot;highlighter-rouge&quot;&gt;{ARCH}&lt;/code&gt; for rpm is &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;{CHANNEL}&lt;/code&gt; is either &lt;code class=&quot;highlighter-rouge&quot;&gt;stable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;nightly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, the repository metadata is signed with the Bintray shared GPG key and the packages are signed with our own key, except for the nightly channel.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;{DISTRO}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;{CHANNEL}&lt;/code&gt; and you are all set.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;[crystal]
name=Crystal
baseurl=https://dl.bintray.com/crystal/rpm/{DISTRO}/x86_64/{CHANNEL}
gpgcheck=0
repo_gpgcheck=1
gpgkey=http://bintray.com/user/downloadSubjectPublicKey?username=bintray&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;We plan to release an unstable 1.0.0-pre1 so we needed to formalise how tagged unstable releases are advertised. The 1.0.0-pre1 release will be the first one to land on the unstable channel, which is currently empty.&lt;/p&gt;

&lt;p&gt;There are also some draft ideas to formalize how .tar.gz will be advertised in channels.&lt;/p&gt;

&lt;p&gt;The advertised installation methods will be updated to reflect these new repositories.&lt;/p&gt;

&lt;p&gt;The CI integrations shall be updated also and might include some new features to pick a specific crystal version and channel.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/08/24/announcing-new-apt-and-rpm-repositories.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/08/24/announcing-new-apt-and-rpm-repositories.html</guid>
      </item>
    
      <item>
        <title>Preparing our shards for Crystal 1.0</title>
        <description>&lt;p&gt;A shard always has one or more dependencies. These dependencies are subject to change. The author might be more or less conservative regarding any breaking-changes. I want to revisit what are the mechanisms to check if the shard we are working on is up to date with the upcoming changes of its dependencies.&lt;/p&gt;

&lt;p&gt;Of course, the process described here is a bit opinionated. Depending on the release process of your shard and the branching scheme used, some things might need a little tweaking. Nonetheless, I think it is valuable to revisit at least one alternative to do it.&lt;/p&gt;

&lt;p&gt;When I say that the shard always has at least one dependency it is because the std-lib, and the language, act as yet another dependency.&lt;/p&gt;

&lt;h1 id=&quot;version-checks&quot;&gt;Version checks&lt;/h1&gt;

&lt;p&gt;As dependencies evolve, it is up to you to decide whether to support just the latest release and force everybody to be on edge, or to support some older versions.&lt;/p&gt;

&lt;p&gt;Thanks to the built-in reflection macros and methods as &lt;code class=&quot;highlighter-rouge&quot;&gt;has_constant?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;has_method?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to?&lt;/code&gt;, etc., we can have code that compiles and works on multiple versions of a dependency.&lt;/p&gt;

&lt;p&gt;One other mechanism that is not as fancy, but simple, is the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; macro. If &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency&lt;/code&gt; defines a &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION&lt;/code&gt; (as it is encouraged by the init template), then &lt;code class=&quot;highlighter-rouge&quot;&gt;{% if compare_versions(AwesomeDependency::VERSION, &quot;2.0.0&quot;) &amp;gt;= 0 %}&lt;/code&gt; is available to use features only on 2.0.0 or later releases.&lt;/p&gt;

&lt;h2 id=&quot;advertised-version&quot;&gt;Advertised version&lt;/h2&gt;

&lt;p&gt;If the 3.x version of AwesomeDependency is being developed, we encourage you to set &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;3.0.0-dev&quot;&lt;/code&gt; or something alike. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;3.0.0&quot;&lt;/code&gt; may be good enough, but some prefer to keep that value for the tagged release only.&lt;/p&gt;

&lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION&lt;/code&gt; is not increased &lt;em&gt;during&lt;/em&gt; the development of 3.x and is kept as the latest 2.x release, then it will be impossible to use &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; to check for 3.x.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION = &quot;3.0.0-dev&quot;&lt;/code&gt; and we want to start supporting that version in our development branch, we will need to use something like &lt;code class=&quot;highlighter-rouge&quot;&gt;{% if compare_versions(AwesomeDependency::VERSION, &quot;3.0.0-0&quot;) &amp;gt;= 0 %}&lt;/code&gt;, with a trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;-0&lt;/code&gt;. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0.0-0 &amp;lt; 3.0.0-a &amp;lt; 3.0.0-dev &amp;lt; 3.0.0-z &amp;lt; 3.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;declaring-dependencies&quot;&gt;Declaring dependencies&lt;/h1&gt;

&lt;p&gt;At this point, we need to mention how dependencies can be declared. As mentioned before, on a tagged release, the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; acts as a contract. This contract states what are the supported versions of each dependency. Shards allows us to declare dependencies, not only as version ranges, but also on a branch, or with no version. Still, I would recommend using version ranges, with lower and upper bound versions, on every formal release of a shard. The other variations should be limited to applications with a &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.lock&lt;/code&gt; or work in progress.&lt;/p&gt;

&lt;p&gt;My recommendation is that dependencies are declared as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 0.9.2&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.9.2, &amp;lt; 0.10&lt;/code&gt;) for 0.x versions dependencies, since the next minor release can have breaking changes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 2.2&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 2.2, &amp;lt; 3.0&lt;/code&gt;) for non 0.x dependencies where any patch level would work.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 2.2, &amp;gt;= 2.2.3&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 2.2.3, &amp;lt; 3.0&lt;/code&gt;) for non 0.x dependencies where at least certain patch is required. Potentially, this could be the current patch version if you want.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 2.2.3, &amp;lt; 5.0.0&lt;/code&gt; for cases where you want to support a wide range of versions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 0.9&lt;/code&gt;, without a patch number, is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.9, &amp;lt; 1.0&lt;/code&gt;. This might be too optimistic for a 0.x dependency, so I would discourage it.&lt;/p&gt;

&lt;p&gt;You might be tempted to say &lt;em&gt;any version is fine&lt;/em&gt; but: Did you check older versions to honor that contract? Are you sure that future versions will be supported? Each dependency might be different: in some cases you might be able to feel more secure about this, depending on the author, maintainer and scope of the shard.&lt;/p&gt;

&lt;p&gt;Assuming we are on board with having the above recommendations on the tagged releases of our shard, we can move on to the next topic: How can we check our shard against upcoming or recently released versions of our dependencies.&lt;/p&gt;

&lt;p&gt;My pick is to have the supported versions of the dependencies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; of the development branch. That is, exactly as they will be published upon release.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/422&quot;&gt;shards override feature&lt;/a&gt; in &lt;a href=&quot;https://crystal-lang.org/2020/08/06/shards-0.12.0-released.html&quot;&gt;Shards v0.12&lt;/a&gt; we can have a &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.edge.yml&lt;/code&gt; file were we can force the usage of the development branch of &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency&lt;/code&gt;, locally or on a CI, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; or other mechanism to check against unreleased changes of that dependency.&lt;/p&gt;

&lt;p&gt;We can also have multiple overrides files if we want to check individual dependencies.&lt;/p&gt;

&lt;p&gt;If this mechanism is used with a cron on the CI we will have nightly checks of the dependencies.&lt;/p&gt;

&lt;p&gt;Another alternative would be to set version ranges on dependencies only when releasing our shard. This would leave unrestricted dependencies in our development branch, but I think that that will require more work upon release, and it will still require the override to avoid picking the latest release by default.&lt;/p&gt;

&lt;h1 id=&quot;moving-to-crystal-10&quot;&gt;Moving to Crystal 1.0&lt;/h1&gt;

&lt;p&gt;So far we haven’t mentioned Crystal 1.0. What’s the deal with this release or any other major releases? The shards out in the wild declare which std-lib and language version they work with.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; declares this. Out in the wild, almost every shard has an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; 1.0&lt;/code&gt; right now. When using &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: x.y[.z]&lt;/code&gt;, it is interpreted that the shard will work with &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; x.y, &amp;gt;= x.y.z&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= x.y.z, &amp;lt; (x+1).0.0&lt;/code&gt;) of the std-lib and language version. This is the same as one of the previously suggested version restriction patterns.&lt;/p&gt;

&lt;p&gt;As with any dependency, we are free to state that any crystal version will work with our release &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: *&lt;/code&gt;, or remove the upper bound &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: &amp;gt; 0.35&lt;/code&gt;. But again, how can you be sure of that claim?&lt;/p&gt;

&lt;p&gt;Up until now, checking if a shard can work with the upcoming Crystal release required us to use a Crystal nightly build. We still need to do this, but the Crystal nightlies release has a &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0-dev&lt;/code&gt; version currently.&lt;/p&gt;

&lt;p&gt;Since the Crystal version we are using is &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0-dev&lt;/code&gt;, shards out in the wild are not candidates. And it is possible that they won’t be available until a 1.x tag is released. How could that be?&lt;/p&gt;

&lt;p&gt;To avoid locking us in this, or other major Crystal release, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; Shards option can be used. It will not be needed when migrating from Crystal 1.0 to 1.1, but it will come handy again when Crystal 2.0 is developed.&lt;/p&gt;

&lt;p&gt;You can set the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS&lt;/code&gt; environment variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; in your CI if the &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; command is performed implicitly along the way.&lt;/p&gt;

&lt;h1 id=&quot;preparing-all-the-ecosystem-for-crystal-10&quot;&gt;Preparing all the ecosystem for Crystal 1.0&lt;/h1&gt;

&lt;p&gt;Let’s revisit the whole state with a more concrete hypothetical (and pessimistic) example. We are the authors of &lt;code class=&quot;highlighter-rouge&quot;&gt;BelovedShard&lt;/code&gt; that depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeShard&lt;/code&gt;. So far everything is working on Crystal 0.35. &lt;code class=&quot;highlighter-rouge&quot;&gt;BelovedShard&lt;/code&gt; is in &lt;code class=&quot;highlighter-rouge&quot;&gt;1.5.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeShard&lt;/code&gt; is in &lt;code class=&quot;highlighter-rouge&quot;&gt;2.2.3&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# BelovedShard's shard.yml file&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;beloved_shard&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.5.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;acme/awesome_shard&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~&amp;gt; 2.2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.35&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# AwesomeShard's shard.yml file&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;awesome_shard&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2.3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.35&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When trying to use Crystal 1.0.0-dev on &lt;code class=&quot;highlighter-rouge&quot;&gt;BelovedShard&lt;/code&gt;, we might stumble onto some issues with &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeShard&lt;/code&gt; and we might not be a maintainer of it. Thanks to Shards override you can fork and change the source of the awesome shard to it.&lt;/p&gt;

&lt;p&gt;Whether the Awesome fix is done in the main repo, or in a fork, or in the development branch, or in a &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal/1.0&lt;/code&gt; branch, it does not make too much of a difference. All this information will be stated in the shard override file.&lt;/p&gt;

&lt;p&gt;The important question is: Which Crystal versions will the next version of Awesome support: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 1.0, &amp;lt; 2.0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.35, &amp;lt; 2.0&lt;/code&gt;? This should guide us when changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt;, and also tell us if we need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions(Crystal::VERSION, &quot;1.0.0-0&quot;)&lt;/code&gt; or not.&lt;/p&gt;

&lt;p&gt;Changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; is not required right from the start. This can be delayed thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt;, but it is a good practice to have a clear idea of what the goal is for that property, since it affects the code to be written.&lt;/p&gt;

&lt;p&gt;Let’s suppose that AwesomeShard was fixed for Crystal 1.0.0-dev in it’s development branch. It will support 1.0 only upon release, but for now &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: 0.35&lt;/code&gt; is still there, since it might want to release a &lt;code class=&quot;highlighter-rouge&quot;&gt;2.2.4&lt;/code&gt; patch before Crystal 1.0 is released. This means that changes to Awesome use &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; and sometime, after Crystal 1.0 is released, those checks will go away and drop support for 0.35.&lt;/p&gt;

&lt;p&gt;More importantly, this means that the development branch of Awesome &lt;em&gt;should&lt;/em&gt; work with Crystal 1.0.0-dev.&lt;/p&gt;

&lt;p&gt;Now let’s focus on BelovedShard where we want the same: the development branch should work with Crystal 1.0.0-dev. But we don’t want to wait for Awesome to be released.&lt;/p&gt;

&lt;p&gt;In our CI (or sometimes locally) we can use the following setup to accomplish that:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# BelovedShard's override file shard.edge.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;acme/awesome_shard&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS=--ignore-crystal-version&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OVERRIDE=shard.edge.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will make the &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; command use the development branch of Awesome, and it will not complain about the Crystal version mismatch (we are running a Crystal 1.x, but shard.yml in awesome states &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.35, &amp;lt; 1.0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;While changing BelovedShard we might need to &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions(Crystal::VERSION, &quot;1.0.0-0&quot;)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions(Awesome::VERSION, &quot;2.3.0-0&quot;)&lt;/code&gt;. But our development branch is able to move forward and stay up to date with Crystal and Awesome. Awesome!&lt;/p&gt;

&lt;p&gt;While Crystal 1.0.0-dev keeps evolving, we can iterate on both shards.&lt;/p&gt;

&lt;p&gt;Once Crystal 1.0 is released, each shard will make the explicit decision about which version of the std-lib and language is supported. This will trigger changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; and maybe some code clean-ups.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h1&gt;

&lt;p&gt;There are other workflows to keep things up to date. This is just one option.&lt;/p&gt;

&lt;p&gt;As a community, other patterns might appear or be preferred in the long run. The recent changes in Shards aimed to provide at least one option that works and can be adapted to some extent.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/08/20/preparing-our-shards-for-crystal-1.0.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/08/20/preparing-our-shards-for-crystal-1.0.html</guid>
      </item>
    
      <item>
        <title>Shards 0.12.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&quot;&gt;Shards 0.12.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release of shards is focused on solving some papercuts issues and adding features that will come in handy to enable a healthy package ecosystem that will work against different versions of the language, plus reducing the friction of working on fixes here and there. Don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: To use this new release you will need to build shards from sources or use a nightly Crystal release until 1.0.0-pre1 is tagged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You shall notice better error messages when a dependency’s &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; file triggers an error thanks to &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/408&quot;&gt;#408&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During development you might need to switch the source or fork of a dependency. This scenario was not being handled correctly in multiple commands and should be fixed now. When possible, shards will try to honor the version chosen despite the change of source. If the source ends up ambiguous, an error will be displayed.&lt;/p&gt;

&lt;p&gt;A source will be ambiguous, for example, if your application requires packages &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; that both require &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; but they point to different forks. Read more at &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/419&quot;&gt;#419&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/429&quot;&gt;#429&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a previous release the crystal property became effectively mandatory and is used to declare for which versions of the compiler and std-lib the package is expected to work. At the same time, the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; was added to opt-out this check. Sometimes shards might just work with another crystal version than the one declared. We encourage maintainers to test, publish and declare the crystal versions they choose to support.&lt;/p&gt;

&lt;p&gt;During the development of a major crystal release with potential breaking-changes (from 0.x to 1.x, and 1.x to 2.x) it is reasonable to run projects’ CIs against nightly with &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt;. Once the stable major release is out and the ecosystem caught up, there will be no need for &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt;. Note that using the crystal property helps prune the search space.&lt;/p&gt;

&lt;p&gt;In this release Shards will read the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS&lt;/code&gt; environment variable for additional CLI options. So the CI can use &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS=--ignore-crystal-version&lt;/code&gt; if the &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; command is implicitly run somewhere. Read more at &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/417&quot;&gt;#417&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/420&quot;&gt;#420&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The featured feature of this release is shards overrides. Since it’s the first iteration of it, we are eager for feedback. We expect this first cut will enable and simplify some workflows and also assist in the transition on the upcoming major release of crystal. The feature was implemented in &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/422&quot;&gt;#422&lt;/a&gt; and it’s motivation is explained in &lt;a href=&quot;https://github.com/crystal-lang/shards/issues/412&quot;&gt;#412&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With local overrides feature you will be able to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.override.yml&lt;/code&gt; or specify such file using &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OVERRIDE&lt;/code&gt; environment variable. If a dependency is listed in the override file, that version will be used, no matter what the rest of the dependency graph states.&lt;/p&gt;

&lt;p&gt;With the above mentioned logic there are a couple of workflows that become simpler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As the developer of a shard I might use my working copy of it instead of checking out a new version.&lt;/li&gt;
  &lt;li&gt;Bypass restrictions of intermediate packages that might be preventing me to use newer releases.&lt;/li&gt;
  &lt;li&gt;Work on a patch on a deep dependency without needing to fork and tweak dependencies all the way down.&lt;/li&gt;
  &lt;li&gt;Test against upstream development of dependencies without complicating the development workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How are you going to use these new features?&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/08/06/shards-0.12.0-released.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/08/06/shards-0.12.0-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.35.1 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&quot;&gt;Crystal 0.35.1&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release is not as exciting as 0.35.0 if you missed that announcement &lt;a href=&quot;/2020/06/09/crystal-0.35.0-released.html&quot;&gt;read it first&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This patch release is needed to iterate on some recent additions and fix a couple of regressions.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.35.0...0.35.1&quot;&gt;13 commits since 0.35.0&lt;/a&gt; by 5 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some of the highlights in this release. Don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;We reverted the changes in &lt;code class=&quot;highlighter-rouge&quot;&gt;IO#write&lt;/code&gt; introduced in 0.35.0. They will return &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; as before. The intended change was more disruptive than we wanted. Apologies for the back and forth.&lt;/p&gt;

&lt;p&gt;For the shards that were updated for 0.35.0 regarding this, it should be enough to compare against 0.35.0 exactly. For the shards that didn’t upgrade to 0.35.0, there is no action needed probably. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9469&quot;&gt;#9469&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The OpenSSL client context is now configured by default with less strict ciphers compatibility for convenience. Ther server context enforces a more secure set. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9459&quot;&gt;#9459&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 1.0.0. We expect to release some 1.0.0-preX to iterate on some final fixes.&lt;/p&gt;

&lt;p&gt;All the deprecated definitions will be removed for 1.0. We want a clean 1.0.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; is available for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/06/19/crystal-0.35.1-released.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/06/19/crystal-0.35.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.35.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&quot;&gt;Crystal 0.35.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;It seems everybody wanted to jump in and polish some corner of the std-lib before 1.0. There was a lot of activity iterating in some recent additions and more cleanups. Also, there were a lot of improvements on debugging, Windows support and stabilization on other platforms runtime.&lt;/p&gt;

&lt;p&gt;This will be the last 0.x release. Get ready for some 1.0.0-preX releases.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.34.0...0.35.0&quot;&gt;242 commits since 0.34.0&lt;/a&gt; by 38 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some of the highlights in this release. They are plenty. Don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;h3 id=&quot;exhaustive-case-take-2&quot;&gt;Exhaustive Case (take 2)&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;/2020/04/06/crystal-0.34.0-released.html#exhaustive-case&quot;&gt;previous release&lt;/a&gt; we allowed the compiler to check the exhaustivity of the case conditions. From the feedback received, we decided to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Allow the &lt;code class=&quot;highlighter-rouge&quot;&gt;case ... when&lt;/code&gt; to be as before: there is an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt;, hence the conditions can be non-exhaustive.&lt;/li&gt;
  &lt;li&gt;Introduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;case ... in&lt;/code&gt; statements as experimental: they don’t have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;, and the conditions need to be exhaustive or the code will not compile. Experimental means that it’s subject to change based on feedback. Even between minor releases.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This decision stays closer to a more familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;case ...  when&lt;/code&gt; semantics and will allow further iteration on the exhaustive case constructs without affecting existing code. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9258&quot;&gt;#9258&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9045&quot;&gt;#9045&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Compiles! Totally fine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Error: missing case String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To make this change, we needed to make &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; a proper keyword. Although it is a breaking-change, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; was already used in the macro sublanguage as a keyword.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;We are making a breaking-change in the compiler CLI to make it more comfortable for shebang &lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt; scripts. From now on when running the compiler with a file argument instead of a command like &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal path/to/file.cr arg1 arg2&lt;/code&gt; the file will be compiled, and then executed with the arguments. This means the arguments affect only the program to run and not the compiler.&lt;/p&gt;

&lt;p&gt;If you need to use compile flags and want to execute the program with some arguments you can still use the run command: &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal run path/to/file.cr -Dcompiler_flag --release -- arg1 arg2&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; will split compiler options from program options. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9171&quot;&gt;#9171&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another breaking-change use for some shell integrations is that &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal env&lt;/code&gt; will now quote the values. This means it’s safe to &lt;code class=&quot;highlighter-rouge&quot;&gt;eval &quot;$(crystal env)&quot;&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal env VARIABLE&lt;/code&gt; is still the same. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9428&quot;&gt;#9428&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The parser got a lot of love. Fixing edge cases, bugs and even a considerable refactor in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9208&quot;&gt;#9208&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some features of the language needed to iterate to work better together. In this release the time came for auto-casting regarding multi-dispatch and regarding default values against unions. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9004&quot;&gt;#9004&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9366&quot;&gt;#9366&lt;/a&gt;. This should solve unfortunate surprises in some scenarios.&lt;/p&gt;

&lt;p&gt;Beyond the improvements of existing features, probably one long awaited feature concerns improvements in Crystal’s debugging capabilities. The story is not yet complete, but in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8538&quot;&gt;#8538&lt;/a&gt; a huge step forward was made. You can check out an article about &lt;a href=&quot;https://dev.to/bcardiff/debug-crystal-in-vscode-via-codelldb-3lf&quot;&gt;how to debug a Crystal program in VS Code article&lt;/a&gt; for more information, configuration and screenshots.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@[Link]&lt;/code&gt; annotation was slightly redesigned. It has a better integration with pkg-config and we dropped the &lt;code class=&quot;highlighter-rouge&quot;&gt;static:&lt;/code&gt; option. This will allow us to focus on future stories for tweaking linking, yet providing good defaults. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8972&quot;&gt;#8972&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For crystal package maintainers&lt;/strong&gt;, it is worth noticing that when building the compiler the &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_CONFIG_PATH&lt;/code&gt; only needs the path of the std-lib. The &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; directory is now always included by the compiler. This will allow future stories for tweaking the shards installation path. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9315&quot;&gt;#9315&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another change that can impact packages is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCE_DATE_EPOCH&lt;/code&gt; environment variable can be used while building the compiler to advertise the source date. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9088&quot;&gt;#9088&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;shards&quot;&gt;Shards&lt;/h2&gt;

&lt;p&gt;Shards v0.11.1 is bundled in this release.&lt;/p&gt;

&lt;p&gt;The main thing you need to know is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property is &lt;strong&gt;effectively mandatory&lt;/strong&gt; now. It is used to filter which versions of a shard are available based on the crystal environment. You can check the semantics in &lt;a href=&quot;https://github.com/crystal-lang/shards/blob/v0.11.1/SPEC.md#crystal&quot;&gt;shards/SPEC.md&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To keep backward compatibility if the &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; is missing, it will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; 1.0.0&lt;/code&gt;. So everything will keep working until Crystal 1.0.0. Yet, if this is inconvenient you can pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; to avoid the check entirely.&lt;/p&gt;

&lt;p&gt;We believe that dependency versions need to be stated clearly for better expectations on consumers. The std-lib and language version is also a dependency.&lt;/p&gt;

&lt;p&gt;The semantics of the &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property though is slightly different from dependencies’ version: &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: x.y.z&lt;/code&gt; is interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; x.y, &amp;gt;= x.y.z&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= x.y.z, &amp;lt; (x+1).0.0&lt;/code&gt;) for convenience. The result is that on every &lt;strong&gt;major&lt;/strong&gt; release there will be some maintenance burden.&lt;/p&gt;

&lt;p&gt;We recommend running &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; on your current project. You will notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.lock&lt;/code&gt; has a new version format with some additions. And there will be a &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/.shards.info&lt;/code&gt; file that will describe the installed dependencies. This new file does not need to be tracked.&lt;/p&gt;

&lt;p&gt;Finally a new feature is that dependencies allow you to express intersections like &lt;code class=&quot;highlighter-rouge&quot;&gt;version: &amp;gt;= 1.0.0, &amp;lt; 2.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a comprehensive list of changes in this shards version you can check its &lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.11.0&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;You will see many breaking-changes in this release. Most of them have deprecation warnings as usual. We didn’t want to go to 1.0 without cleaning up a lot of stuff beforehand. The cleanup probably should have happened before. It’s been hard to prioritize, but we are getting to it.&lt;/p&gt;

&lt;p&gt;Many methods have an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; argument that is a sink or target of the computation. In &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/5916&quot;&gt;#5916&lt;/a&gt; you can read the motivation to standardize them as the first argument in these functions. It got implemented in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9134&quot;&gt;#9134&lt;/a&gt; and some follow up PRs.&lt;/p&gt;

&lt;p&gt;Related to all these &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; methods, on &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, instead of returning &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; values, there are new overloads to emit directly the result to the &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;; read more in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9236&quot;&gt;#9236&lt;/a&gt;. This affects &lt;code class=&quot;highlighter-rouge&quot;&gt;#underscore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#titleize&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#capitalize&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#upcase&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;#downcase&lt;/code&gt; methods.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep an eye on &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/9291&quot;&gt;#9291&lt;/a&gt; for a proposal to improve the interpolation of strings so they can emit directly to an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another breaking-change in &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; is that &lt;code class=&quot;highlighter-rouge&quot;&gt;#skip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#write&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#write_utf8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#write_byte&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#write_bytes&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;#skip_to_end&lt;/code&gt; return the number of bytes it skipped/written. This is similar to what other languages do, and serves to account for the position in the stream while writing in it, without additional calls. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9233&quot;&gt;#9233&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9363&quot;&gt;#9363&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are introducing the &lt;code class=&quot;highlighter-rouge&quot;&gt;@[Experimental]&lt;/code&gt; annotation to mark which parts of the std-lib, language, or shard should be used with extra care. An experimental feature is allowed to change, break, or disappear despite the semver guarantees. For now, the annotation is used in the documentation generator tool. We have a few draft ideas to give more formal semantics to it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9244&quot;&gt;#9244&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Digest&lt;/code&gt; types got some refactors and small method renames. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8426&quot;&gt;#8426&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of features, the &lt;code class=&quot;highlighter-rouge&quot;&gt;OptionParser&lt;/code&gt; is now allowed to define sub-commands. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9009&quot;&gt;#9009&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some other clean-ups: &lt;code class=&quot;highlighter-rouge&quot;&gt;Flate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Gzip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Zlib&lt;/code&gt; were moved inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Compress&lt;/code&gt; module in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8886&quot;&gt;#8886&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Flate&lt;/code&gt; was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;Compress::Deflate&lt;/code&gt;, actually. You might need to &lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;compress/gzip&quot;&lt;/code&gt; and change some constants here or there. The &lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;gzip&quot;&lt;/code&gt; is still available but will show a deprecation warning.&lt;/p&gt;

&lt;p&gt;Some efforts were dedicated to&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;FileUtils&lt;/code&gt;, to clean them up and to ensure operations are available from both APIs. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9175&quot;&gt;#9175&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;

&lt;p&gt;If you are into cross-compiling you’ll be quite happy with the introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;host_flag?&lt;/code&gt; macro method. Similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;flag?&lt;/code&gt; but it resolves on the host machine. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9049&quot;&gt;#9049&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;numeric&quot;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;The overflow detection was fixed to correctly handle operations with mixed sign operands. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9403&quot;&gt;#9403&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We added &lt;code class=&quot;highlighter-rouge&quot;&gt;Int#digits&lt;/code&gt; but along the way it was mandatory to reverse the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInt#digits&lt;/code&gt; for consistency. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9383&quot;&gt;#9383&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.mapping&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML.mapping&lt;/code&gt; migrated to their own packages: &lt;a href=&quot;https://github.com/crystal-lang/json_mapping.cr&quot;&gt;github:crystal-lang/json_mapping.cr&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/yaml_mapping.cr&quot;&gt;github:crystal-lang/yaml_mapping.cr&lt;/a&gt;. They served well but in the presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Serializable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Serializable&lt;/code&gt; it’s better to remove them from the std-lib. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9272&quot;&gt;#9272&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;time&quot;&gt;Time&lt;/h3&gt;

&lt;p&gt;From now on the default precision of &lt;code class=&quot;highlighter-rouge&quot;&gt;Time#to_rfc3339&lt;/code&gt; will be seconds, without fractions. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fraction_digits&lt;/code&gt; named argument to choose between 0, 3, 6, 9 precision digits. In &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9283&quot;&gt;#9283&lt;/a&gt; we are dropping the logic to show the fraction of seconds depending on the time value.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;We’ve updated the SSL server secure defaults in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9026&quot;&gt;#9026&lt;/a&gt;. And fixed some &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server&lt;/code&gt; sporadic failures during SSL handshake in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9177&quot;&gt;#9177&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a couple of breaking-changes in &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server&lt;/code&gt; though. We improved the error handling and logging in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9115&quot;&gt;#9115&lt;/a&gt; and integrated it with the new logging module. The &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Request#remote_address&lt;/code&gt; type was changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Address?&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9210&quot;&gt;#9210&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;logging&quot;&gt;Logging&lt;/h3&gt;

&lt;p&gt;First of all, huge thanks for all the feedback and early adopters of the new logging module introduced in &lt;a href=&quot;/2020/04/06/crystal-0.34.0-released.html&quot;&gt;0.34.0&lt;/a&gt;. There are several changes that, though they are indeed breaking-changes, do not affect the main APIs. Together they bring additional functionality and improved performance in some use cases.&lt;/p&gt;

&lt;p&gt;We renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Severity::Warning&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Warn&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9293&quot;&gt;#9293&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.warn { ... }&lt;/code&gt; was, and still is, the way to emit a warning. This change affects the &lt;code class=&quot;highlighter-rouge&quot;&gt;:warning&lt;/code&gt; and configuration via environment variables mostly. Similarly, we dropped &lt;code class=&quot;highlighter-rouge&quot;&gt;Verbose&lt;/code&gt;, and added &lt;code class=&quot;highlighter-rouge&quot;&gt;Trace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Notice&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9107&quot;&gt;#9107&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The setup of logging got simpler. There are a couple of &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup*&lt;/code&gt; methods. Each of them will always set up the binding fully between sources and backends.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:debug&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will show debug or above in the stdout for all source&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trace&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will show trace or above in the stdout for db.* sources and nothing else&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup_from_env&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will grab the value of LOG_LEVEL env variable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You might notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; is now using a single environment variable as input. More flexibility will come later, but the new named arguments should offer a better experience. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9145&quot;&gt;#9145&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each entry could already have context information that is grabbed from the running fiber. We essentially split &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Context&lt;/code&gt; responsibilities between &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt;. The former is a hash-like structure of &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; with some allocation and algorithmic optimizations. The main work was done in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9227&quot;&gt;#9227&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9295&quot;&gt;#9295&lt;/a&gt;. These refactors also drop the immutability guarantee in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; that was achieved via cloning.&lt;/p&gt;

&lt;p&gt;One wanted feature that this enables is the possibility to attach local metadata or structured information to a log entry. That is, without the penalty of changing and restoring the context of the current fiber. We were allowed to do this while keeping the initial design of avoiding the creation of values if the entry is not to be emitted.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Program started&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Program started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# same as previous&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# local data&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_that_computes_hash_named_tuple_or_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# with exception&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# with exception, no local data&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# same as previous&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;action: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# empty message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;How to create custom log formatters was revisited in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9211&quot;&gt;#9211&lt;/a&gt;. Creating a formatter from a block or proc is still an option, but check in some simplified ways to define a formatter from a string directly.&lt;/p&gt;

&lt;p&gt;If you want to test that log entries are emitted you can use the new spec helper &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.capture&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9201&quot;&gt;#9201&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;We dropped &lt;code class=&quot;highlighter-rouge&quot;&gt;Concurrent::Future&lt;/code&gt; and top-level methods &lt;code class=&quot;highlighter-rouge&quot;&gt;delay&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;. If you want to keep using them, use the &lt;a href=&quot;https://github.com/crystal-community/future.cr&quot;&gt;github:crystal-community/future.cr&lt;/a&gt; shard. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9093&quot;&gt;#9093&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another feature that was dropped is the &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9097&quot;&gt;#9097&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We expect to develop a more robust approach to cover these scenarios post 1.0.&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;We deprecated &lt;code class=&quot;highlighter-rouge&quot;&gt;Process#kill&lt;/code&gt; in favor of  &lt;code class=&quot;highlighter-rouge&quot;&gt;Process#signal&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9006&quot;&gt;#9006&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also deprecated the top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;, since it won’t be available in multi-threading. If this is a stopper issue for you, &lt;code class=&quot;highlighter-rouge&quot;&gt;Process.fork&lt;/code&gt; is still available. But it is no longer a public API. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9136&quot;&gt;#9136&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;platforms&quot;&gt;Platforms&lt;/h3&gt;

&lt;p&gt;For macOS users, we fixed some compatibility issues with 10.15 (Catalina) in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9296&quot;&gt;#9296&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For BSD users, we added support for DragonFly(BSD) in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9178&quot;&gt;#9178&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For musl users, we fixed some weird segfaults in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9238&quot;&gt;#9238&lt;/a&gt; and fixed some empty backtraces &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9267&quot;&gt;#9267&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Windows users, well, lots of stuff. To see the ongoing efforts don’t miss the &lt;a href=&quot;https://github.com/crystal-lang/crystal/wiki/Porting-to-Windows&quot;&gt;wiki page&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/5430&quot;&gt;#5430&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding actual changes in this release for Windows we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; improvements &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9015&quot;&gt;#9015&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9038&quot;&gt;#9038&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9037&quot;&gt;#9037&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9257&quot;&gt;#9257&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; behaviour was aligned in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9207&quot;&gt;#9207&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Process&lt;/code&gt; was implemented &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9047&quot;&gt;#9047&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9021&quot;&gt;#9021&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9122&quot;&gt;#9122&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9112&quot;&gt;#9112&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9149&quot;&gt;#9149&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9310&quot;&gt;#9310&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal spec&lt;/code&gt; command deals with Windows paths in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9234&quot;&gt;#9234&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And the compiler is able to bootstrap itself on windows. &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9054&quot;&gt;#9054&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9062&quot;&gt;#9062&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9095&quot;&gt;#9095&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9106&quot;&gt;#9106&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9307&quot;&gt;#9307&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, note that there are still some parts of the std-lib that are not ready to work on Windows.&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;

&lt;p&gt;The main story in the doc generator tool is the support to show a version picker. An external &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; file will let you specify the current and past releases to populate the version picker. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8792&quot;&gt;#8792&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9074&quot;&gt;#9074&lt;/a&gt;, and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9254&quot;&gt;#9254&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 1.0.0. We expect to release some 1.0.0-preX to iterate on some final fixes.&lt;/p&gt;

&lt;p&gt;We acknowledge that there were a lot of cleanups in the last couple of releases. We did our best to stay below a discomfort threshold.&lt;/p&gt;

&lt;p&gt;All the deprecated definitions will be removed for 1.0. We want a clean 1.0.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/06/09/crystal-0.35.0-released.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/06/09/crystal-0.35.0-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.34.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.34.0&quot;&gt;Crystal 0.34.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;Get excited because this release comes with some of the final touches to the language before 1.0: a better exception hierarchy to replace Errno, a new logging module, cleanups and fixes aiming for a better, more stable release, one that should make us all proud.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.33.0...0.34.0&quot;&gt;183 commits since 0.33.0&lt;/a&gt; by 26 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some of the highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.34.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;h3 id=&quot;exhaustive-case&quot;&gt;Exhaustive Case&lt;/h3&gt;

&lt;p&gt;From now on a &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; expression will no longer have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt;. This is useful to enable an exhaustive check across the &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; branches within the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;. If you are doing &lt;code class=&quot;highlighter-rouge&quot;&gt;case exp&lt;/code&gt; over a union or an enum value, and you are missing a &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; to cover some type or value, the compiler will let you know. Unless you have an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: In this version, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; does not cover all the possibilities, a warning is generated, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; is implicitly added. In the next version it will produce a compile-time error and the implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; will be gone.&lt;/p&gt;

&lt;p&gt;The following snippet complains about the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;when Char&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And the following snippet complains about the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;when West&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Direction&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;North&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;South&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;East&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;West&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;North&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;north?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;south?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;east?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The only case that will still have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; is when there is no expression and only a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; statements. This construction is equivalent to multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;elseif&lt;/code&gt; where there is an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; also.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if x.even?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# elsif y &amp;gt;= 0&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8424&quot;&gt;#8424&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;procs-subtyping&quot;&gt;Procs subtyping&lt;/h3&gt;

&lt;p&gt;While dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;Procs&lt;/code&gt; and callbacks it is common to not use the return value. In Crystal, that usually means returning &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. In regular methods you can specify the return type &lt;code class=&quot;highlighter-rouge&quot;&gt;: Nil&lt;/code&gt; to ignore the value of the last expression.&lt;/p&gt;

&lt;p&gt;The counterpart in &lt;code class=&quot;highlighter-rouge&quot;&gt;Procs&lt;/code&gt; is harder because there usually is no type annotation for the return type.&lt;/p&gt;

&lt;p&gt;For ease of use, we make it that any &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(T)&lt;/code&gt; should be able to be used as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(Nil)&lt;/code&gt;. That is, ignoring the return value in runtime. So, for those that like formality, &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(T) &amp;lt; Proc(Nil)&lt;/code&gt; is a valid subtyping rule now.&lt;/p&gt;

&lt;p&gt;There was a previous attempt to achieve something similar, but in this version, a better handling of that affair was implemented. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8970&quot;&gt;#8970&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable_overflow&lt;/code&gt; compiler flag is dropped. This means that the usual arithmetic operators will always have the overflow check. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;+&lt;/code&gt; and others to skip overflow checks. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8772&quot;&gt;#8772&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_OPTS&lt;/code&gt; environment variable can now be used to inject compiler options and flags implicitly. This is useful, for example, when the compiler is used in &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; steps of shards and you want to enforce &lt;code class=&quot;highlighter-rouge&quot;&gt;--error-on-warnings&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8900&quot;&gt;#8900&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;LLVM 10 has just been released and we added support for it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8940&quot;&gt;#8940&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The codegen for Windows has been improved to work without &lt;code class=&quot;highlighter-rouge&quot;&gt;--single-module&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8978&quot;&gt;#8978&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;shards&quot;&gt;Shards&lt;/h2&gt;

&lt;p&gt;A new version of Shards (0.10.0) has been released. Until now you probably have been using Shards 0.8.1 which lacks some features. Shards 0.9.0 polished many use cases, but it uses a SAT solver, which doesn’t scale. For Shards 0.10.0 we created &lt;a href=&quot;https://github.com/crystal-lang/crystal-molinillo&quot;&gt;crystal-molinillo&lt;/a&gt; a port of the dependency resolution algorithm used by &lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt; and &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read the rest of the updates in the &lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.10.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will be eagerly waiting for feedback from you on Shards to polish it before 1.0.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;h3 id=&quot;errno-no-more&quot;&gt;Errno no more&lt;/h3&gt;

&lt;p&gt;Having as much as possible portable code is part of the goal of the std-lib. One of the areas that were in need of polishing was how &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; were handled. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; exceptions are now gone, and were replaced by a new hierarchy of exceptions. Unfortunately, there is no easy way to make a smooth transition here with deprecation warnings. The &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Timeout&lt;/code&gt; exception was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::TimeoutError&lt;/code&gt; to match the new hierarchy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::TimeoutError&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::Error&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::NotFoundError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::AccessDeniedError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::AlreadyExistsError&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Error&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::ConnectError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::BindError&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, you can now use these new types to catch specific errors instead of checking &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; values. We included the most used errors as classes. If there is no specific class, the base &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Error&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Error&lt;/code&gt; will be raised with a meaningful description.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; underlying value is still present if you need it, via the &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemError&lt;/code&gt; module included in this new hierarchy. But it is better if you avoid using it.&lt;/p&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8885&quot;&gt;#8885&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;log&quot;&gt;Log&lt;/h3&gt;

&lt;p&gt;The former &lt;code class=&quot;highlighter-rouge&quot;&gt;Logger&lt;/code&gt; module is deprecated and will be removed soon. Its replacement is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Log&lt;/code&gt; module: it’s shorter, more flexible and convenient.&lt;/p&gt;

&lt;p&gt;You can use the top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;Log&lt;/code&gt; constant to emit log entries, or you can declare one inside your module or class. This allows the entries to be emitted from a &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each source will be configured to send the entries to different &lt;em&gt;backends&lt;/em&gt; depending on the severity level. If you initialize the logging with &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; you will be able to filter the level and the sources using the &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_LEVEL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_SOURCES&lt;/code&gt; environment variables.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# file app.cr&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup_from_env&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApp&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the app is running&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# log from myapp source&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;finished&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# log from the top-level source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If you want to log see all the log entries of the app above, you will need to set both environment variables, since their default values are &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_LEVEL=INFO&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_SOURCES=&quot;&quot;&lt;/code&gt; (only top-level).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ CRYSTAL_LOG_LEVEL=DEBUG CRYSTAL_LOG_SOURCES=&quot;*&quot; ./app
D, [2020-03-30T21:54:50.079554000Z #26206]   DEBUG -- app:my_app: the app is running
I, [2020-03-30T21:54:50.079624000Z #26206]    INFO -- app:: finished
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8847&quot;&gt;#8847&lt;/a&gt; and check &lt;a href=&quot;https://crystal-lang.org/api/0.34.0/Log.html&quot;&gt;the docs&lt;/a&gt; for how you can define your own backends and use more advanced features of this module.&lt;/p&gt;

&lt;h3 id=&quot;top-level-cleanup&quot;&gt;Top level cleanup&lt;/h3&gt;

&lt;p&gt;As we prepare for 1.0, we wanted to iterate and clean up some of the top-level of the std-lib and prelude. That is the reason behind many deprecations that involved part of &lt;code class=&quot;highlighter-rouge&quot;&gt;Colorize&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8892&quot;&gt;#8892&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Iconv&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8890&quot;&gt;#8890&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DL&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8882&quot;&gt;#8882&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some modules were moved out of the top-level: &lt;code class=&quot;highlighter-rouge&quot;&gt;Adler32&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; are inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Digest&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8881&quot;&gt;#8881&lt;/a&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AtExitHandlers&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Crystal&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8883&quot;&gt;#8883&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There might be some more cleanups/renames before 1.0 to avoid wanting some trivial early breaking-changes.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;On the performance corner of this release, when using &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fill&lt;/code&gt; for writing all zero values, it will now use &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; for the entire underlying buffer, instead of iterating every position. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8903&quot;&gt;#8903&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;There is a small breaking change in &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; in order to align the API of all builders. &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Builder.new&lt;/code&gt; with block was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Builder.build&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8896&quot;&gt;#8896&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using the different format builders, &lt;code class=&quot;highlighter-rouge&quot;&gt;IO#flush&lt;/code&gt; will be called to ensure all the content will get through in case you are not closing properly the destination file. This applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;INI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; builders. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8876&quot;&gt;#8876&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;time&quot;&gt;Time&lt;/h3&gt;

&lt;p&gt;It’s time for more breaking-changes in favor of less error-prone code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; initialization API will use mandatory named arguments, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Time::Span.new minutes: 2, seconds: 3&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8257&quot;&gt;#8257&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;When closing a &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket&lt;/code&gt; the internal &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; to force an invalid file descriptor and avoid mixing &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; from different &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;s. In single-thread, this was never an issue, but on multi-thread, as usual, issues like this one can cause big headaches. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8873&quot;&gt;#8873&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Buffered#flush_on_newline&lt;/code&gt; is back. And its default value will be helpful for building CLI tools and pipe them into other commands. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8935&quot;&gt;#8935&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;The WebSocket support was lacking the proper handling of close code. In order to implement them, a breaking-change on the server-side and in client-side parts was needed. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8975&quot;&gt;#8975&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8981&quot;&gt;#8981&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;The windows support is moving forward while enabling more specs, and more contributors are jumping into the adventure. Check out &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8683&quot;&gt;#8683&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8822&quot;&gt;#8822&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8885&quot;&gt;#8885&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8958&quot;&gt;#8958&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal init&lt;/code&gt; tool got some polishing. The name of the shard is validated with respect &lt;a href=&quot;https://github.com/crystal-lang/shards/blob/master/SPEC.md#name&quot;&gt;shards spec&lt;/a&gt; and it can be inferred from the directory. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8737&quot;&gt;#8737&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal docs&lt;/code&gt; tool will now show warnings. In previous releases we switched to &lt;code class=&quot;highlighter-rouge&quot;&gt;:ditto:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:nodoc:&lt;/code&gt; as magic comments. But we missed showing you the warnings in case you forget to add the colons. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8880&quot;&gt;#8880&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.35. There won’t be many more 0.x releases. We are getting super close to 1.0!.&lt;/p&gt;

&lt;p&gt;Again, we will be eagerly waiting for feedback from you on Shards to polish it before 1.0.&lt;/p&gt;

&lt;p&gt;All deprecation warnings will soon be gone, and there will be errors in the next release. We want a clean 1.0.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/04/06/crystal-0.34.0-released.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/04/06/crystal-0.34.0-released.html</guid>
      </item>
    
      <item>
        <title>Towards Crystal 1.0</title>
        <description>&lt;p&gt;Currently the main goal of the Crystal core team is to reach 1.0 in the near future. Since achieving that goal involves a number of non-obvious tradeoffs, we want to use this post to shed some light on those inherent tensions and how they drive our work and priorities for the next few releases.&lt;/p&gt;

&lt;p&gt;There are three main aspects of the Crystal ecosystem that in a way compete for resources and design decisions (when we say “Crystal ecosystem”, we mean: the compiler, the std-lib, official-ish and community shards, apps that depend on Crystal, and the community itself):&lt;/p&gt;

&lt;p&gt;The language is already widely used, so we want to minimize the number of breaking changes, and when we can’t avoid them, at least minimize their impact on existing codebases.
We want 1.0 to be a stable version of the language.
We want the language to keep evolving (said another way, we don’t want the fact that we reached 1.0 to mean that we’re left with an ossified language).&lt;/p&gt;

&lt;p&gt;The challenge at hand is to get as quickly as possible to a 1.0 version of Crystal that is at the same time as faithful as possible to the current state of the language, stable enough for individuals and organizations to feel comfortable adopting it for even their highest impact projects, and a solid foundation for future major versions.&lt;/p&gt;

&lt;p&gt;Considering this context, the most important question to answer almost continuously is: what should happen before 1.0 and what can wait? Let’s delve into that!&lt;/p&gt;

&lt;h2 id=&quot;what-can-wait---after-10&quot;&gt;What &lt;strong&gt;can&lt;/strong&gt; wait? - after 1.0&lt;/h2&gt;

&lt;p&gt;Since we created Crystal, the language kept evolving through a very free process of exploration of new ideas, sometimes experimental ones, that we hoped would bring joy and productivity to the programmer at the end of the day. Sometimes these ideas end up requiring changes in the language. We want to continue receiving and exploring these new ideas, because these organic processes are what made Crystal what it is.&lt;/p&gt;

&lt;p&gt;However, paying excessive attention to these kinds of novel ideas takes away precious resources and focus from the main goal of releasing 1.0. While approaching that, there will be less focus on new and enhanced features that require changes to the language.&lt;/p&gt;

&lt;p&gt;There are also important features that are strongly wanted, but they do not require changes in the language itself. These will likely keep receiving lots of attention from the community and we will do our best to review and give feedback to help them move forward. But we will mainly be focused on the features that are holding back 1.0.&lt;/p&gt;

&lt;p&gt;Let us go over some of those features, which might well make it into eventual 1.x versions of the language:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: We aim for most of the shards and apps built on Crystal to be portable. The std-lib should hide platform specific aspects as well as possible. With that in mind adding more platforms to the supported list should not impact neither the language nor the public API. Again, recently we integrated a CI for Windows to ensure we continue moving steadily forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: Improving the debugging capabilities requires changes to the compiler and tool ecosystem but not to the language. There is ongoing effort from the community and further collaboration is expected and welcome. The current efforts are looking amazing. These may or may not land in 1.0, it depends a lot on timing of testing and feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi-threading&lt;/strong&gt;: There are pending stories to make multi-thread mode a non preview feature. To mention a few: which the desired guarantees for some parts of the std-lib are, or how the scheduler and runtime could be improved. We already polished &lt;code class=&quot;highlighter-rouge&quot;&gt;GC&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; to behave correctly with multi-threading on. Future potential enhancements may allow you to use multiple threads more freely, but the core aspects of the language and runtime are set and done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X or Y compiler bug&lt;/strong&gt;: We will keep fixing them, before and after 1.0. Their existence didn’t prevent the existing community from building awesome stuff.&lt;/p&gt;

&lt;h2 id=&quot;what-cant-wait---before-10&quot;&gt;What &lt;strong&gt;can’t&lt;/strong&gt; wait? - before 1.0&lt;/h2&gt;

&lt;p&gt;So, what is missing to reach 1.0?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tooling&lt;/strong&gt;: There are a couple of stories regarding tooling that are missing and need improvements. Shards needs to be more solid for 1.0 (you might have noticed some work in the last couple of weeks on that).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;multi-thread stability &amp;amp; documentation&lt;/strong&gt;: With 0.33.0 we added some new features for multi-thread and improved IO handling. We want and need thread-safe IO, Channel and runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std-lib polishing&lt;/strong&gt;: Although the std-lib will keep evolving we know there are a couple of modules that do need at least a couple of iterations. We want to improve the current API before 1.0 so we allow more solid solutions to be built upon these features. Some examples of these modules include logging, Errno and general exceptions type hierarchy, as well as removing clutter from the top-level namespace.&lt;/p&gt;

&lt;p&gt;These areas are the ones Manas &amp;amp; the rest of the core-team will invest most of their effort until 1.0 is reached.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;With this post, we want to provide some clarity on what to expect and what not to expect from the Crystal core team for the next few months.&lt;/p&gt;

&lt;p&gt;Of course, other areas that are not mentioned can still receive contributions. But we want to be transparent on the need to aim for fewer, smaller and self-contained changes in the API to include them in 1.0. Said another way, we’ll be much more conservative as regards our merge policy until we get to 1.0.&lt;/p&gt;

&lt;p&gt;We already have many plans for after 1.0 that we’ll be excited to start sharing and investing efforts on after celebrating Crystal 1.0. Let’s get there first!&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/03/03/towards-crystal-1.0.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/03/03/towards-crystal-1.0.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.33.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.33.0&quot;&gt;Crystal 0.33.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes with bug fixes, stability of the std-lib &amp;amp; runtime, some awaited language features and lots of cleanup.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.32.1...0.33.0&quot;&gt;117 commits since 0.32.1&lt;/a&gt; by 29 contributors.&lt;/p&gt;

&lt;p&gt;Let’s review some highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.33.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;select/timeout&lt;/code&gt; language construct allows you to perform a blocking channel operation but timeout after a specific amount of time. It was previously possible to do manually, but it required some boilerplate and a dedicated fiber. This is now possible while taking advantage of libevent directly.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;timeout&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; is not a top-level method and is expected to be used only in a blocking &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; condition (ie: without an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;). Read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; in select statements in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8506&quot;&gt;#8506&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;

&lt;p&gt;In the built-in macros the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeNode#name&lt;/code&gt; got extended with a new overload that allows you to pick whether you want (or not) the generic arguments when getting the type’s name (default is to include them). Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8483&quot;&gt;#8483&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Bar::Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Bar::Baz&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Foo(T)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;generic_args: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;There were some memory corruption bugs because we used &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; 32-bits primitives in 64-bits machines. They are now fixed in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8746&quot;&gt;#8746&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, the default &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_PATH&lt;/code&gt; gives precedence to &lt;code class=&quot;highlighter-rouge&quot;&gt;./lib&lt;/code&gt; over embedded std-lib so your shards can override some std-lib modules if needed. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8752&quot;&gt;#8752&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We did some clean-ups and completely dropped the support for previously deprecated comma separators in enums. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8657&quot;&gt;#8657&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;We took the time to do some clean-ups regarding various previously deprecated methods and modules. Some of them deprecated almost over a year ago. &lt;code class=&quot;highlighter-rouge&quot;&gt;PartialComparable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Crypto::Bcrypt::Password#==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server::Response#respond_with_error&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::PullParser::Kind#==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#==(JSON::PullParser::Kind)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Token#type&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;String#at&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.now&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.utc_now&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.escape&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.unescape&lt;/code&gt; are really no longer available. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8646&quot;&gt;#8646&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8596&quot;&gt;#8596&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also some additions. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object#in?(collection)&lt;/code&gt; is analogous to &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#includes?(obj)&lt;/code&gt; but with the receiver and argument swapped.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4242&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8720&quot;&gt;#8720&lt;/a&gt; and check many of the usages in the current std-lib at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8723&quot;&gt;#8723&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;The JSON deserialization improved to work better with some union types in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8689&quot;&gt;#8689&lt;/a&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::PullParser&lt;/code&gt; deals properly with overflows in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8698&quot;&gt;#8698&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dig?&lt;/code&gt; methods for &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Any&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Any&lt;/code&gt; got fixed to avoid raising on non-structure values. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8745&quot;&gt;#8745&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;How File, User and Group interact with each other keeps evolving to find a sweet spot. &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Info#owner&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Info#group&lt;/code&gt; are deprecated in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;#owner_id&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;#group_id&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8007&quot;&gt;#8007&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;The handling of &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; got more robust to deal with some race conditions in multi-thread and avoid using invalid file descriptors in libevent after fork. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8707&quot;&gt;#8707&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8733&quot;&gt;#8733&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSSL::SSL::Socket&lt;/code&gt; was improved to deal with some misbehaving parties out in the wild.  Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8540&quot;&gt;#8540&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;Sometimes in generic types, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; might cause some glitches. Like in &lt;code class=&quot;highlighter-rouge&quot;&gt;Array(Nil)&lt;/code&gt;, how would you distinguish if &lt;code class=&quot;highlighter-rouge&quot;&gt;#[]?&lt;/code&gt; returns the stored &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; or the out-of-bounds value. Even though sometimes it is still useful to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; as a type argument like in &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel(Nil)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Future(Nil)&lt;/code&gt; should now be working without surprises. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8650&quot;&gt;#8650&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ve been paying attention to sporadic failures on the CI multi-thread jobs. Sometimes the specs need to be iterated since they were written with a different single-thread mindset. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8592&quot;&gt;#8592&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8643&quot;&gt;#8643&lt;/a&gt;, and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8724&quot;&gt;#8724&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::FileDescriptor.from_stdio&lt;/code&gt; now returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; with blocking mode depending on the type of the file descriptor used for STDIN, STDOUT and STDERR. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8787&quot;&gt;#8787&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some changes in the runtime should improve the error reporting and exception handling.
Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8728&quot;&gt;#8728&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8499&quot;&gt;#8499&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8743&quot;&gt;#8743&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another addition that will reduce some paper cuts is a new top-level exception handler reporting. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8735&quot;&gt;#8735&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8791&quot;&gt;#8791&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dprintf&lt;/code&gt; are used to print to STDOUT or STDERR. But the latter is not portable. &lt;code class=&quot;highlighter-rouge&quot;&gt;Crystal::System.print_error&lt;/code&gt; was extended to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;-like format. So it should be used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;dprintf&lt;/code&gt; usually. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8786&quot;&gt;#8786&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;spec&quot;&gt;Spec&lt;/h3&gt;

&lt;p&gt;Usually using specs the &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec::DotFormatter&lt;/code&gt; shows… dots! The &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec::JUnitFormatter&lt;/code&gt; is another option that is a good fit for richer reporting. It’s got improved with lots of information in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8599&quot;&gt;#8599&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a bonus point this reporting was integrated in our CircleCI jobs so we can get some concise reports of failures, slow test and other statistics in the test summary.  Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8617&quot;&gt;#8617&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;doc-generator&quot;&gt;Doc generator&lt;/h3&gt;

&lt;p&gt;We finally settled to use &lt;code class=&quot;highlighter-rouge&quot;&gt;:ditto:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:nodoc:&lt;/code&gt; for the doc generator. So you should always put the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; around those words when documenting your code. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/6362&quot;&gt;#6362&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;

&lt;p&gt;Regarding Windows support there was some movement. A Windows CI using GitHub Actions was added in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8676&quot;&gt;#8676&lt;/a&gt; to help us move forward and not backwards. The &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; module in prelude was enabled in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8661&quot;&gt;#8661&lt;/a&gt;. More specs got fixed to work in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8670&quot;&gt;#8670&lt;/a&gt;. And a helper script to identify working std-lib specs was added in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8664&quot;&gt;#8664&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding Alpine we are now also running it in the CI in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/7420&quot;&gt;#7420&lt;/a&gt; and you might &lt;a href=&quot;/2020/02/02/alpine-based-docker-images.html&quot;&gt;have read&lt;/a&gt; about the Alpine Docker images we are now building since &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8708&quot;&gt;#8708&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started to use &lt;code class=&quot;highlighter-rouge&quot;&gt;lld&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; in Linux builds since it seems we were hitting some &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; limitations. In case you experience them you might also want to move to &lt;code class=&quot;highlighter-rouge&quot;&gt;lld&lt;/code&gt;. If it is available the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; will take care to use it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8641&quot;&gt;#8641&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.34.&lt;/p&gt;

&lt;p&gt;It will also be helpful if your shards are tested against Crystal nightly releases. Either Docker or Snap are the current channels to get them easily. This will help reduce the friction of a release while checking if the ecosystem is in good shape.&lt;/p&gt;

&lt;p&gt;The upcoming 0.34 is likely to include an updated shards, so using nightly would help us to collect feedback from it.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/02/14/crystal-0.33.0-released.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/02/14/crystal-0.33.0-released.html</guid>
      </item>
    
      <item>
        <title>Alpine-based Docker images</title>
        <description>&lt;p&gt;The Crystal team provides Docker images with installed Crystal compiler on Docker Hub at &lt;a href=&quot;https://hub.docker.com/r/crystallang/crystal/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystallang/crystal&lt;/code&gt;&lt;/a&gt;. Crystal versions since 0.13.0 are available as Docker images based on different versions of &lt;a href=&quot;https://ubuntu.org/&quot;&gt;Ubuntu Linux&lt;/a&gt;.
Images based on &lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; are now also vailable, starting with &lt;a href=&quot;https://hub.docker.com/layers/crystallang/crystal/0.32.1-alpine/images/sha256-8f66a0a36a7e7c396944f64c89fa81a3b488ca6c82ce55ca5d5f1edd348d14e6&quot;&gt;0.32.1-alpine&lt;/a&gt;.
Alpine images are a bit more lightweight than Ubuntu images, for 0.32.1 it’s 185 MB vs. 115 MB. A few bytes saved.&lt;/p&gt;

&lt;p&gt;But more importantly, Alpine Linux is based on &lt;a href=&quot;https://www.musl-libc.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;musl-libc&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://www.gnu.org/software/libc/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-libc&lt;/code&gt;&lt;/a&gt; which is used by default on most other distributions, including Ubuntu. Linking against &lt;code class=&quot;highlighter-rouge&quot;&gt;musl-libc&lt;/code&gt; is currently the only way to &lt;a href=&quot;https://github.com/crystal-lang/crystal/wiki/Static-Linking&quot;&gt;build fully statically linked Crystal binaries&lt;/a&gt;.
Alpine Linux makes this easy enough. For example, the offical Crystal compiler builds for Linux are statically linked against &lt;code class=&quot;highlighter-rouge&quot;&gt;musl-libc&lt;/code&gt; on Alpine Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pkgs.alpinelinux.org/package/edge/community/x86_64/crystal&quot;&gt;Crystal packages for APK (Alpine’s package manager)&lt;/a&gt; have been available for quite some time and the edge releases are usually updated pretty quickly. Updated Docker images are going to be available immediately on a new Crystal release. And they’re always based on a stable version of Alpine Linux but provide the latest Crystal release.&lt;/p&gt;

&lt;p&gt;Here’s an example how the Docker image can be used to build a statically linked &lt;em&gt;Hello World&lt;/em&gt; program:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'puts &quot;Hello World!&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; hello-world.cr
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;:/workspace &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /workspace crystallang/crystal:0.32.1-alpine &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    crystal build hello-world.cr &lt;span class=&quot;nt&quot;&gt;--static&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./hello-world
&lt;span class=&quot;go&quot;&gt;Hello World!
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ldd hello-world
&lt;span class=&quot;go&quot;&gt;        statically linked&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/02/02/alpine-based-docker-images.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/02/02/alpine-based-docker-images.html</guid>
      </item>
    
      <item>
        <title>Introducing shardbox.org</title>
        <description>&lt;p&gt;I’m happy to announce the launch of &lt;a href=&quot;https://shardbox.org&quot;&gt;shardbox.org&lt;/a&gt;, a database for discovering shards.&lt;/p&gt;

&lt;p&gt;To be clear: Shardbox is not a shards registry. It won’t serve as part of shards’ dependency resolution, which works entirely decentralized. It just collects information about publicly available shards and serves as a catalog for the shards ecosystem. It’s a tool for developers to help find existing shards they might want to use.
If you’re familiar with Ruby, think of it more like &lt;a href=&quot;https://www.ruby-toolbox.com/&quot;&gt;The Ruby Toolbox&lt;/a&gt; than &lt;a href=&quot;https://rubygems.org/&quot;&gt;Rubygems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are already services providing a similar functionality such as &lt;a href=&quot;https://crystalshards.org/&quot;&gt;crystalshards.org&lt;/a&gt; or &lt;a href=&quot;https://shards.info/&quot;&gt;shards.info&lt;/a&gt;. So why do we need another one?
The existing services work as a relatively simple wrapper around the GitHub API and don’t maintain their own database. While being relatively easy to implement, this approach can’t fully support the capabilities of shards and provide in-depth information about shards and the relations inside the ecosystem.&lt;/p&gt;

&lt;p&gt;Most importantly, being focused on GitHub excludes any shards hosted elsewhere. Shardbox doesn’t rely on any hosting provider and can work with any shard repository as long as it’s publicly available. It can still use supplementary information provided by hosting providers, when available.&lt;/p&gt;

&lt;p&gt;Shardbox collects information about shards and their relationships. This makes it easy to discover reverse dependencies and dependency graphs (shards.info has a basic implementation, but it’s restricted to the capabilities of GitHub’s search API), even for older releases.&lt;/p&gt;

&lt;p&gt;When a repository is removed from GitHub, it doesn’t just vanish from the Shardbox database. Information is kept even for shards that are no longer accessible. This can help recover otherwise lost information and it’s possible to continue on when the repository becomes available at a different location. Any shard can have associated mirror repositories.&lt;/p&gt;

&lt;p&gt;Shardbox offers a lot of additional features, such as taxonomy, data analysis, release histories, access to shard contents and domain-specific search features.&lt;/p&gt;

&lt;p&gt;For the better part of 2019 I’ve been on-and-off working on this side project.
It is finally in a state that I think it works pretty well and provides useful information for everyone using and looking for shards.
I expect it to run without major disruptions, but it’s not yet battle tested. Teething troubles may apply.&lt;/p&gt;

&lt;p&gt;If you find any problems, don’t hesitate to open a ticket at &lt;a href=&quot;https://github.com/shardbox/shardbox-web/issues&quot;&gt;the issue tracker&lt;/a&gt;. Contributions for fixing bugs and feature enhancements are also very welcome. I already have a few ideas what would be nice to do next and I’m curious about your suggestions as well.
If you find a shard is missing from the database, you can add it to the catalog at &lt;a href=&quot;https://github.com/shardbox/catalog&quot;&gt;github.com/shardbox/catalog&lt;/a&gt;. See &lt;a href=&quot;https://shardbox.org/contribute&quot;&gt;shardbox.org/contribute&lt;/a&gt; for more details.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
        <link>https://crystal-lang.org/2020/01/02/introducing-shardbox.html</link>
        <guid isPermaLink="true">https://crystal-lang.org/2020/01/02/introducing-shardbox.html</guid>
      </item>
    
  </channel>
</rss>
