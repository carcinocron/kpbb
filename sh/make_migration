#!/usr/bin/env crystal

require "pg"
require "option_parser"
require "./cli_shared"

dry_run = false
verbose = false
make_migration_name : String? = nil
parser = ::OptionParser.new do |parser|
  parser.banner = "Usage: sh/make_migration --env=.env NAME1 [NAME2 [NAME3 [...]]]"
  parser.on("-v", "--verbose", "Enable verbose output") { verbose = true }
  # parser.on("", "--dry-run", "Dry Run") { dry_run = true }
  parser.on("-h", "--help", "Show this help") do
    puts parser
    exit(0)
  end
  parser.missing_option do |missing_option|
    next if missing_option == "--env"
    pp ({:missing_option => missing_option})
    exit(1)
  end
  parser.invalid_option do |invalid_option|
    pp ({:invalid_option => invalid_option})
    exit(1)
  end
end

pp ({:line => __LINE__, :ARGV => ARGV})
parser.parse

pp ({:line => __LINE__, :dry_run => dry_run})
# names = Array(String).new
# parser.unknown_args(unknown_args: names)

timestamp = Time.utc

names = ARGV.select { |v| v[0]? && v[0]? != '-' }
# pp ({:names => names})

if names.size == 0
  p "migration names required"
  exit 1
end

names.each do |name|
  timestamp_s = timestamp.to_s("%Y_%m_%d_%H%M%S")
  filename = "#{Dir.current}/#{DB_MIGRATION_PATH}/#{timestamp_s}_#{name}.migration.cr"
  classname = "Migration_#{timestamp_s}_#{name}"
  p "writing template file: #{filename}"
  unless dry_run
    # ::File.open filename do |file|
    #   file.puts <<-FILE
    #     nice
    #   FILE
    # end
    ::File.write filename, <<-FILE
    module Iom::Cli::DB::Migrations
      class #{classname} < ::Iom::Cli::DB::Migration
        # apply changes to the DB
        def up : Nil
          unprepared <<-SQL
            CREATE TABLE public.#{name} (
              id BIGSERIAL PRIMARY KEY NOT NULL,
              created_at TIMESTAMPTZ DEFAULT NOW(),
              updated_at TIMESTAMPTZ DEFAULT NOW()
            );
          SQL
        end

        # revert changes to the DB
        def down : Nil
          unprepared <<-SQL
            DROP TABLE IF EXISTS public.#{name};
          SQL
        end
      end
    end
    FILE
  end
  timestamp = timestamp + 1.second
end

SUFFIX     = ".migration.cr"
SUFFIX_LEN = SUFFIX.size + 1
migrations = Dir.children(DB_MIGRATION_PATH)
  .select { |filename| filename.ends_with? SUFFIX }
  .map { |filename| "::Iom::Cli::DB::Migrations::Migration_" + filename[0..(filename.size - SUFFIX_LEN)] }
  .sort

NEWLINE = "\n"
index_for_runner = String.build do |str|
  str << "# autogenerated file!"
  str << NEWLINE
  str << "module Iom::Cli::DB::MigrationRunner"
  str << NEWLINE
  str << "  def self.migrations(db : ::DB::Database) : Array(::Iom::Cli::DB::Migration)"
  str << NEWLINE
  str << "    return ["
  str << NEWLINE
  migrations.each do |m|
    str << "      #{m}.new(db),"
    str << NEWLINE
  end
  str << "    ] of ::Iom::Cli::DB::Migration"
  str << NEWLINE
  str << "  end"
  str << NEWLINE
  str << "end"
  str << NEWLINE
end

::File.write "#{Dir.current}/#{DB_MIGRATION_PATH}/index_for_runner.cr", index_for_runner
